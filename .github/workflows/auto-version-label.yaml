name: 'Auto Version Label'
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
jobs:
  label-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get PR commits and analyze for version bump
        id: analyze-commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Get the base SHA (the point where PR branches from main)
          BASE_SHA=$(git merge-base origin/main HEAD)
          
          # Get all commits in the PR
          echo "Analyzing commits in PR #$PR_NUMBER between $BASE_SHA and ${{ github.event.pull_request.head.sha }}"
          COMMITS=$(git log --format="%H %s" $BASE_SHA..${{ github.event.pull_request.head.sha }})
          
          # Initialize flags
          HAS_BREAKING_CHANGE=false
          HAS_FEAT=false
          HAS_OTHER=false
          
          # Analyze each commit message
          echo "Commits found:"
          while read -r COMMIT_LINE; do
            COMMIT_SHA=$(echo $COMMIT_LINE | cut -d' ' -f1)
            COMMIT_MSG=$(git log -1 --format="%B" $COMMIT_SHA)
            
            echo "---"
            echo "Commit: $COMMIT_SHA"
            echo "Message: $COMMIT_MSG"
            
            # Check for breaking changes
            if echo "$COMMIT_MSG" | grep -q -i "BREAKING CHANGE:\|BREAKING-CHANGE:\|BREAKING CHANGES:\|BREAKING-CHANGES:" || \
               echo "$COMMIT_MSG" | grep -q -E '^(feat|fix|refactor|perf)(\([^)]+\))?!:'; then
              echo "Breaking change detected!"
              HAS_BREAKING_CHANGE=true
            # Check for new features
            elif echo "$COMMIT_MSG" | grep -q -E '^feat(\([^)]+\))?:'; then
              echo "New feature detected!"
              HAS_FEAT=true
            # All other commit types
            else
              echo "Other change detected"
              HAS_OTHER=true
            fi
          done <<< "$COMMITS"
          
          # Determine the appropriate version bump based on commit types
          if [ "$HAS_BREAKING_CHANGE" = "true" ]; then
            VERSION_TYPE="Major"
          elif [ "$HAS_FEAT" = "true" ]; then
            VERSION_TYPE="Minor"
          else
            VERSION_TYPE="Patch"
          fi
          
          echo "Determined version bump: $VERSION_TYPE"
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
      - name: Remove existing version labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Get current labels
          LABELS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" | \
            jq -r '.[].name')
          
          # Remove any existing version labels
          if echo "$LABELS" | grep -q "version: Major"; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/version%3A%20Major"
            echo "Removed version: Major label"
          fi
          
          if echo "$LABELS" | grep -q "version: Minor"; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/version%3A%20Minor"
            echo "Removed version: Minor label"
          fi
          
          if echo "$LABELS" | grep -q "version: Patch"; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/version%3A%20Patch"
            echo "Removed version: Patch label"
          fi
      
      - name: Apply version label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          VERSION_TYPE="${{ steps.analyze-commits.outputs.version_type }}"
          LABEL="version: $VERSION_TYPE"
          
          # Apply the new label
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" \
            -d "{\"labels\":[\"$LABEL\"]}"
          
          echo "Applied label: $LABEL"