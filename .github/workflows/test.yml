name: Build and Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # Allow manual execution

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.11.0
    
    - uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Cache pnpm store
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Cache node_modules
      uses: actions/cache@v4
      id: node-modules-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: pnpm install --frozen-lockfile
    
    - name: Build application
      run: pnpm run build
    
    - name: Run unit tests
      run: pnpm run test:run
    
    - name: Run unit tests with coverage
      run: pnpm run test:coverage
    
    - name: Extract Test Results Summary
      id: test-summary
      run: |
        # Run tests to get output for parsing
        TEST_OUTPUT=$(pnpm run test:run 2>&1 || true)
        echo "$TEST_OUTPUT" > test-output.txt
        
        # Strip ANSI escape codes and extract test statistics
        CLEAN_OUTPUT=$(echo "$TEST_OUTPUT" | sed 's/\x1b\[[0-9;]*m//g')
        
        # Extract numbers from summary lines
        TOTAL_TESTS=$(echo "$CLEAN_OUTPUT" | grep 'Tests.*passed' | awk '{print $2}' || echo "0")
        FAILED_TESTS=$(echo "$CLEAN_OUTPUT" | grep 'Tests.*failed' | awk '{for(i=1;i<=NF;i++) if($i=="failed") print $(i-1)}' || echo "0")
        SKIPPED_TESTS=$(echo "$CLEAN_OUTPUT" | grep 'Tests.*skipped' | awk '{for(i=1;i<=NF;i++) if($i=="skipped") print $(i-1)}' || echo "0")
        TEST_FILES=$(echo "$CLEAN_OUTPUT" | grep 'Test Files.*passed' | awk '{for(i=1;i<=NF;i++) if($i=="Files") print $(i+1)}' || echo "0")
        
        echo "total-tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
        echo "failed-tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
        echo "skipped-tests=$SKIPPED_TESTS" >> $GITHUB_OUTPUT
        echo "test-files=$TEST_FILES" >> $GITHUB_OUTPUT
        
        # Create job summary
        echo "## 🧪 Unit Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| ✅ Tests Passed | $TOTAL_TESTS |" >> $GITHUB_STEP_SUMMARY
        echo "| ❌ Tests Failed | $FAILED_TESTS |" >> $GITHUB_STEP_SUMMARY
        echo "| ⏭️ Tests Skipped | $SKIPPED_TESTS |" >> $GITHUB_STEP_SUMMARY
        echo "| 📁 Test Files | $TEST_FILES |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add coverage info if available
        if [ -d "coverage" ]; then
          echo "📊 **Coverage report generated** - see artifacts below" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30
    
    - name: Upload test output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-output
        path: test-output.txt
        retention-days: 7
    
    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const totalTests = '${{ steps.test-summary.outputs.total-tests }}';
          const failedTests = '${{ steps.test-summary.outputs.failed-tests }}';
          const skippedTests = '${{ steps.test-summary.outputs.skipped-tests }}';
          const testFiles = '${{ steps.test-summary.outputs.test-files }}';
          
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          let status = '✅ All tests passed!';
          if (parseInt(failedTests) > 0) {
            status = `❌ ${failedTests} test(s) failed`;
          }
          
          const coverageInfo = fs.existsSync('coverage') ? '📊 **[Coverage Report](coverage/index.html)** | ' : '';
          
          const body = `## 🧪 Unit Test Results
          
          ${status}
          
          | Status | Count |
          |--------|-------|
          | ✅ Tests Passed | ${totalTests} |
          | ❌ Tests Failed | ${failedTests} |
          | ⏭️ Tests Skipped | ${skippedTests} |
          | 📁 Test Files | ${testFiles} |
          
          ${coverageInfo}🔍 **[View Action Run](${runUrl})** | 📁 **[Download Artifacts](${runUrl}/artifacts)**
          
          <details>
          <summary>ℹ️ About this report</summary>
          
          - Unit tests run with Vitest and React Testing Library
          - Tests cover utilities, hooks, contexts, and components
          - Coverage report includes line, branch, and function coverage
          - shadcn/ui components are excluded from testing as per project requirements
          </details>`;
          
          // Try to find existing comment to update
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🧪 Unit Test Results')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }