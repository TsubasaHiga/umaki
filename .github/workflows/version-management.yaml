name: 'Version Management'
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled
    branches:
      - main

jobs:
  label-pr:
    name: 'Auto Version Label'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get PR commits and analyze for version bump
        id: analyze-commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Get the base SHA (the point where PR branches from main)
          BASE_SHA=$(git merge-base origin/main HEAD)
          
          # Get all commits in the PR
          echo "Analyzing commits in PR #$PR_NUMBER between $BASE_SHA and ${{ github.event.pull_request.head.sha }}"
          COMMITS=$(git log --format="%H %s" $BASE_SHA..${{ github.event.pull_request.head.sha }})
          
          # Initialize flags
          HAS_BREAKING_CHANGE=false
          HAS_FEAT=false
          HAS_OTHER=false
          
          # Analyze each commit message
          echo "Commits found:"
          while read -r COMMIT_LINE; do
            COMMIT_SHA=$(echo $COMMIT_LINE | cut -d' ' -f1)
            COMMIT_MSG=$(git log -1 --format="%B" $COMMIT_SHA)
            
            echo "---"
            echo "Commit: $COMMIT_SHA"
            echo "Message: $COMMIT_MSG"
            
            # Check for breaking changes
            if echo "$COMMIT_MSG" | grep -q -i "BREAKING CHANGE:\|BREAKING-CHANGE:\|BREAKING CHANGES:\|BREAKING-CHANGES:" || \
               echo "$COMMIT_MSG" | grep -q -E '^(feat|fix|refactor|perf)(\([^)]+\))?!:'; then
              echo "Breaking change detected!"
              HAS_BREAKING_CHANGE=true
            # Check for new features
            elif echo "$COMMIT_MSG" | grep -q -E '^feat(\([^)]+\))?:'; then
              echo "New feature detected!"
              HAS_FEAT=true
            # All other commit types
            else
              echo "Other change detected"
              HAS_OTHER=true
            fi
          done <<< "$COMMITS"
          
          # Determine the appropriate version bump based on commit types
          if [ "$HAS_BREAKING_CHANGE" = "true" ]; then
            VERSION_TYPE="Major"
          elif [ "$HAS_FEAT" = "true" ]; then
            VERSION_TYPE="Minor"
          else
            VERSION_TYPE="Patch"
          fi
          
          echo "Determined version bump: $VERSION_TYPE"
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
      - name: Remove existing version labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Get current labels
          LABELS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" | \
            jq -r '.[].name')
          
          # Remove any existing version labels
          if echo "$LABELS" | grep -q "version: Major"; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/version%3A%20Major"
            echo "Removed version: Major label"
          fi
          
          if echo "$LABELS" | grep -q "version: Minor"; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/version%3A%20Minor"
            echo "Removed version: Minor label"
          fi
          
          if echo "$LABELS" | grep -q "version: Patch"; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels/version%3A%20Patch"
            echo "Removed version: Patch label"
          fi
      
      - name: Apply version label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          VERSION_TYPE="${{ steps.analyze-commits.outputs.version_type }}"
          LABEL="version: $VERSION_TYPE"
          
          # Apply the new label
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" \
            -d "{\"labels\":[\"$LABEL\"]}"
          
          echo "Applied label: $LABEL"
  
  bump-version:
    name: 'Bump Package Version'
    needs: label-pr
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set PR number
        id: set-pr
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_ref=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
      
      - name: Check for version labels
        id: check-labels
        run: |
          # Use GitHub API to get labels for the PR
          PR_NUMBER=${{ steps.set-pr.outputs.pr_number }}
          REPO=${{ github.repository }}
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" | \
            jq -r '.[].name')
          
          # Check for version labels
          VERSION_TYPE=""
          if echo "$LABELS" | grep -q "version: Major"; then
            VERSION_TYPE="major"
          elif echo "$LABELS" | grep -q "version: Minor"; then
            VERSION_TYPE="minor"
          elif echo "$LABELS" | grep -q "version: Patch"; then
            VERSION_TYPE="patch"
          fi
          
          echo "Found version type: $VERSION_TYPE"
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
          # Set has_version_label flag
          if [ -n "$VERSION_TYPE" ]; then
            echo "has_version_label=true" >> $GITHUB_OUTPUT
          else
            echo "has_version_label=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: version-bump
        if: ${{ steps.check-labels.outputs.has_version_label == 'true' }}
        run: |
          # Read current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split into major, minor, patch components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version according to type
          VERSION_TYPE="${{ steps.check-labels.outputs.version_type }}"
          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$VERSION_TYPE" == "patch" ]; then
            PATCH=$((PATCH + 1))
          fi
          
          # Create new version string
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json
          # Using node to ensure proper JSON formatting
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            packageJson.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2) + '\n');
          "
          
          # Commit the changes
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "Bump version to $NEW_VERSION"
          git push origin HEAD:${{ steps.set-pr.outputs.pr_ref }}
          
          echo "has_changed=true" >> $GITHUB_OUTPUT
      
      - name: Create tag
        if: ${{ steps.version-bump.outputs.has_changed == 'true' }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if the tag already exists
          TAG_VERSION="${{ steps.version-bump.outputs.version }}"
          if ! git rev-parse "v$TAG_VERSION" >/dev/null 2>&1; then
            git tag "v$TAG_VERSION"
            git push origin "v$TAG_VERSION"
            echo "Tag v$TAG_VERSION created and pushed"
          else
            echo "Tag v$TAG_VERSION already exists, skipping tag creation"
          fi