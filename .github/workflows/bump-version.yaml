---
name: 'Bump Package Version'
on:
  pull_request:
    types:
      - unlabeled
      - labeled
      - synchronize
      - opened
      - reopened
    branches:
      - main
jobs:
  bump-version:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for version labels
        id: check-labels
        run: |
          # Use GitHub API to get labels for the PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" | \
            jq -r '.[].name')
          
          # Check for version labels
          VERSION_TYPE=""
          if echo "$LABELS" | grep -q "version: Major"; then
            VERSION_TYPE="major"
          elif echo "$LABELS" | grep -q "version: Minor"; then
            VERSION_TYPE="minor"
          elif echo "$LABELS" | grep -q "version: Patch"; then
            VERSION_TYPE="patch"
          fi
          
          echo "Found version type: $VERSION_TYPE"
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
          # Set has_version_label flag
          if [ -n "$VERSION_TYPE" ]; then
            echo "has_version_label=true" >> $GITHUB_OUTPUT
          else
            echo "has_version_label=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: version-bump
        if: ${{ steps.check-labels.outputs.has_version_label == 'true' }}
        run: |
          # Read current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split into major, minor, patch components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version according to type
          VERSION_TYPE="${{ steps.check-labels.outputs.version_type }}"
          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$VERSION_TYPE" == "patch" ]; then
            PATCH=$((PATCH + 1))
          fi
          
          # Create new version string
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json
          # Using node to ensure proper JSON formatting
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            packageJson.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2) + '\n');
          "
          
          # Commit the changes
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "Bump version to $NEW_VERSION"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
          
          echo "has_changed=true" >> $GITHUB_OUTPUT
      
      - name: Create tag
        if: ${{ steps.version-bump.outputs.has_changed == 'true' }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if the tag already exists
          TAG_VERSION="${{ steps.version-bump.outputs.version }}"
          if ! git rev-parse "v$TAG_VERSION" >/dev/null 2>&1; then
            git tag "v$TAG_VERSION"
            git push origin "v$TAG_VERSION"
            echo "Tag v$TAG_VERSION created and pushed"
          else
            echo "Tag v$TAG_VERSION already exists, skipping tag creation"
          fi
